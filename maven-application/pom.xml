<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>maven-demo</artifactId>
        <groupId>com.myke</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>maven-application</artifactId>

    <!-- 配置多套环境 -->
    <profiles>
        <!-- 开发环境使用的配置 -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>env</name>
                    <value>env_dev</value>
                </property>
            </activation>
            <properties>
                <jdbc.url>dev jdbc url</jdbc.url>
                <jdbc.username>dev jdbc username</jdbc.username>
                <jdbc.password>dev jdbc password</jdbc.password>
            </properties>
            <distributionManagement></distributionManagement>
        </profile>
        <!-- 测试环境使用的配置 -->
        <profile>
            <id>test</id>
            <activation>
                <property>
                    <name>env</name>
                    <value>env_test</value>
                </property>
            </activation>
            <properties>
                <jdbc.url>test jdbc url</jdbc.url>
                <jdbc.username>test jdbc username</jdbc.username>
                <jdbc.password>test jdbc password</jdbc.password>
            </properties>
        </profile>
        <!-- 线上环境使用的配置 -->
        <profile>
            <id>prod</id>
            <activation>
                <property>
                    <name>env</name>
                    <value>env_prod</value>
                </property>
            </activation>
            <properties>
                <jdbc.url>prod jdbc url</jdbc.url>
                <jdbc.username>prod jdbc username</jdbc.username>
                <jdbc.password>prod jdbc password</jdbc.password>
            </properties>
        </profile>
    </profiles>

    <properties>

        <!-- 自义定属性在配置文件 jdbc.properties 中获取 -->
        <jdbc.url>jdbc:mysql://localhost:3306/javacode2018?characterEncoding=UTF-8</jdbc.url>
        <jdbc.username>root</jdbc.username>
        <jdbc.password>root</jdbc.password>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 配置maven编译的时候采用的编译器版本 -->
        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        <!-- 指定源代码是什么版本的 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <!-- maven中执行编译的时候会用到这个配置 -->
        <maven.compiler.target>1.8</maven.compiler.target>

        <!--//////////////////// [maven 属性引用: 通过命令查看变量内容： mvn help:effective-pom > mvn.xml] /////////////////////////////-->
        <!-- 项目的主源码目录，默认为src/main/java/ -->
        <a>${project.build.sourceDirectory}</a>
        <!-- 项目的测试源码目录，默认为src/test/java/ -->
        <b>${project.build.testSourceDirectory}</b>
        <!-- 项目构建输出目录，默认为target/ -->
        <c>${project.build.directory}</c>
        <!-- 项目主代码编译输出目录，默认为target/classes -->
        <d>${project.build.outputDirectory}</d>
        <!-- 项目测试代码编译输出目录，默认为target/test-classes -->
        <e>${project.build.testOutputDirectory}</e>
        <!-- 项目的groupId -->
        <f>${project.groupId}</f>
        <!-- 项目的artifactId -->
        <g>${project.artifactId}</g>
        <!-- 项目的version，与${version}等价-->
        <h>${project.version}</h>
        <!-- 项目打包输出文件的名称，默认为${project.artifactId}-${project.version} -->
        <i>${project.build.finalName}</i>

        <!-- setting属性 -->
        <!-- 获取本地仓库地址-->
        <a1>${settings.localRepository}</a1>

        <!-- 系统属性 -->
        <!-- 用户目录 -->
        <a2>${user.home}</a2>

        <!-- 环境变量属性，获取环境变量JAVA_HOME的值 -->
        <a3>${env.JAVA_HOME}</a3>
    </properties>

    <dependencies>

        <dependency>
            <groupId>com.myke</groupId>
            <artifactId>maven-rpc</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.10</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 查看插件实现类：SurefirePlugin -->
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.22.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <version>3.1.0</version>
        </dependency>
    </dependencies>


    <build>
        <!-- pom 文件在加载过程中，会将 <filter> 指定路径上的文件，加载到内存中 -->
        <!--<filters>-->
        <!--    <filter></filter>-->
        <!--</filters>-->

        <resources>
            <resource>
                <!-- 指定资源文件的目录 -->
                <directory>${project.basedir}/src/main/resources</directory>
                <!-- 是否开启过滤替换配置，默认是不开启的 -->
                <filtering>true</filtering>
                <!--需要被处理的文件列表-->
                <includes>
                    <include>**/jdbc.properties</include>
                </includes>
                <!--排除需要被处理的资源文件列表-->
                <excludes>
                    <exclude>**/const.properties</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <!--spring boot 插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- maven 资源打包插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!--是否使用默认占位符-->
                    <useDefaultDelimiters>true</useDefaultDelimiters>
                    <delimiters>
                        <!--占位符(默认是@),在配置文件中可以通过下面的占位符获取maven中定义的变量值-->
                        <delimiter>${*}</delimiter>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <!--占位符中value的编码方式-->
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!--
            生成源码
            其他信息会从父pom.xml中插件的定义中传递过来,
            但子pom.xml中也可以自定义插件的这些配置。
            父子pom.xml中插件配置信息会合并。

            可以通过 mvn help:effective-pom 命令解析得到这个构件最终 pom.xml 的内容。
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-source</id>
                        <goals>
                            <goal>help</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>